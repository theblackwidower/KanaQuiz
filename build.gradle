// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        if (getGradle().getStartParameter().getTaskNames().toString().toLowerCase().contains('release') ||
                getGradle().getStartParameter().getTaskNames().toString().contains('dependencyUpdates')) {
            classpath 'com.google.gms:google-services:4.3.10'
            classpath 'com.google.firebase:perf-plugin:1.4.1'
            classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.1'
        }

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'com.vanniktech.android.junit.jacoco' version '0.16.0'
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id 'com.github.ben-manes.versions' version '0.42.0'
}

allprojects {
    repositories {
        mavenCentral()
        google()
        maven {
            url 'https://jitpack.io'
        }
        //noinspection JcenterRepositoryObsolete,GrDeprecatedAPIUsage
        jcenter() // TODO: find alternate repository for the RikkaApps' FontProvider
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Will ensure the Gradle Versions Plugin only alerts me to available upgrades to proper release versions
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'b', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
